openapi: 3.0.3
info:
  title: Agile monkeys shop
  description: API to manage the agile monkeys shop products
  version: 1.0.0
  contact:
    name: Brais González Úbeda
    email: braisgu@gmail.com
servers:
- url: '{protocol}://{host}:{port}/{basePath}'
  variables:
    protocol:
      default: http
    host:
      default: localhost
    port:
      default: '8080'
    basePath:
      default: agile-monkeys/v1
tags:
- name: Customer
- name: User
paths:
  /customer/list:
    get:
      tags:
      - Customer
      operationId: findAll
      summary: List all customers in the database
      description: List all customers in the database
      responses:
        '200':
          description: Customer list response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NotAllowed'
        '404':
          $ref: '#/components/responses/NotFound'
  /customer/fullInfo/{customerId}:
    get:
      tags:
      - Customer
      summary: Get full customer information
      description: Get full customer information, including a photo URL
      operationId: getFullInfo
      parameters:
      - in: path
        name: customerId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Full info response of a customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NotAllowed'
        '404':
          $ref: '#/components/responses/NotFound'
  /customer/create:
    post:
      tags:
      - Customer
      summary: Create a new customer
      description: Create a new customer
      operationId: create
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '200':
          description: Successful response. Customer is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NotAllowed'
        '404':
          $ref: '#/components/responses/NotFound'
  /customer/update/{customerId}:
    put:
      tags:
      - Customer
      summary: Update a customer
      description: Update customer
      operationId: update
      parameters:
      - in: path
        name: customerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Successful response. Customer is updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCustomerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NotAllowed'
        '404':
          $ref: '#/components/responses/NotFound'
  /customer/delete/{customerId}:
    delete:
      tags:
      - Customer
      summary: Delete a customer
      description: Delete a customer
      operationId: delete
      parameters:
      - in: path
        name: customerId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful response. Customer is deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCustomerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NotAllowed'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/list:
    get:
      tags:
      - User
      operationId: findAllUsers
      summary: List all users in the database
      description: List all users in the database
      responses:
        '200':
          description: User list response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NotAllowed'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/create:
    post:
      tags:
      - User
      summary: Create a new user
      description: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: Successful response. User is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NotAllowed'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/update/{userId}:
    put:
      tags:
      - User
      summary: Update a user
      description: Update user
      operationId: updateUser
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Successful response. User is updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NotAllowed'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/delete/{userId}:
    delete:
      tags:
      - User
      summary: Delete a user
      description: Delete a user
      operationId: deleteUser
      parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful response. User is deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/NotAllowed'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  responses:
    BadRequest:
      description: Request contains incorrect syntax or cannot be processed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotAllowed:
      description: Operation not allowed for current user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  parameters:
    CustomerId:
      in: header
      name: customerId
      required: true
      schema:
        type: string
  schemas:
    Customer:
      type: object
      required:
      - id
      - name
      - surname
      properties:
        id:
          description: Customer ID
          type: string
        name:
          description: Customer name
          type: string
          example: "Brais"
        surname:
          description: Customer surname
          type: string
          example: "González"
        photo:
          description: Customer photo
          type: string
        createdBy:
          description: ID of the user who created the customer
          type: string
        updatedBy:
          description: ID of the user who updated the customer
          type: string
    CustomerListResponse:
      type: object
      required:
      - customerList
      properties:
        customerList:
          description: List of all customers
          type: array
          items:
            $ref: '#/components/schemas/LiteCustomer'
    LiteCustomer:
      type: object
      required:
      - id
      - name
      - surname
      properties:
        id:
          description: Customer ID
          type: string
        name:
          description: Customer name
          type: string
          example: "Brais"
        surname:
          description: Customer surname
          type: string
          example: "González"
    CreateCustomerRequest:
      type: object
      required:
      - id
      - name
      - surname
      properties:
        id:
          type: string
        name:
          type: string
        surname:
          type: string
        photo:
          description: Customer photo
          type: string
          format: binary
    CreateCustomerResponse:
      type: object
      properties:
        id:
          description: Customer ID
          type: string
          example: "braisId1"
    DeleteCustomerResponse:
      type: object
      properties:
        id:
          description: Customer ID
          type: string
          example: "braisId1"
    ErrorResponse:
      type: object
      required:
      - code
      - title
      - description
      properties:
        code:
          description: The error status code
          type: integer
          format: int32
        title:
          description: A summarize sentence about the error
          type: string
        description:
          description: Detailed information about the error
          type: string
        additionalData:
          description: More data available to understand or track the error
          type: object
    UpdateCustomerRequest:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        photo:
          description: Customer photo
          type: string
          format: binary
    UpdateCustomerResponse:
      type: object
      properties:
        id:
          description: Customer ID
          type: string
    User:
      type: object
      required:
      - id
      - name
      - surname
      - username
      - password
      properties:
        id:
          description: User ID
          type: string
        username:
          type: string
          example: "brais123"
        password:
          type: string
          example: "password"
        name:
          type: string
          example: "Brais"
        surname:
          type: string
          example: "González"
        age:
          type: integer
          format: int32
        userType:
          $ref: '#/components/schemas/UserType'
        userStatus:
          $ref: '#/components/schemas/UserStatus'
    UserListResponse:
      type: object
      properties:
        userList:
          description: List of all users
          type: array
          items:
            $ref: '#/components/schemas/User'
    CreateUserRequest:
      type: object
      required:
      - id
      - username
      - password
      - name
      - surname
      properties:
        id:
          type: string
        username:
          type: string
        password:
          type: string
        name:
          type: string
        surname:
          type: string
        age:
          type: integer
          format: int32
        userType:
          $ref: '#/components/schemas/UserType'
        userStatus:
          $ref: '#/components/schemas/UserStatus'
    CreateUserResponse:
      type: object
      properties:
        id:
          description: User ID
          type: string
          example: "braisId1"
    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        name:
          type: string
        surname:
          type: string
        age:
          type: string
        userType:
          $ref: '#/components/schemas/UserType'
        userStatus:
          $ref: '#/components/schemas/UserStatus'
    UpdateUserResponse:
      type: object
      properties:
        id:
          description: User ID
          type: string
    DeleteUserResponse:
      type: object
      properties:
        id:
          description: User ID
          type: string
          example: "braisId1"
    UserType:
      type: string
      enum:
      - admin
      - user
      - undefined
    UserStatus:
      type: string
      enum:
      - active
      - inactive
      - suspended
      - unknown